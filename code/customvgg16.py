# -*- coding: utf-8 -*-
"""customvgg16.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17QdIFo3nnYoTrwMBm5RUVHlSswBFi5y3
"""

import numpy as np
import os
import time
from keras.applications.vgg16 import VGG16
from keras.preprocessing import image
from keras.applications.imagenet_utils import preprocess_input
from keras.applications.imagenet_utils import decode_predictions
from keras.layers import Dense, Activation, Flatten
from keras.layers import merge, Input
from keras.models import Model
from keras.utils import np_utils
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split

!unzip -qq '/content/drive/My Drive/minor.zip'

train_folder= '/content/New folder/chest-xray-pneumonia/chest_xray/chest_xray/train/'
val_folder = '/content/New folder/chest-xray-pneumonia/chest_xray/chest_xray/val1/'
test_folder = '/content/New folder/chest-xray-pneumonia/chest_xray/chest_xray/test/'

from keras.preprocessing.image import ImageDataGenerator, load_img

train_datagen = ImageDataGenerator(rescale = 1./255,
                                   shear_range = 0.2,
                                   zoom_range = 0.2,
                                   horizontal_flip = True)

test_datagen = ImageDataGenerator(rescale = 1./255)  #Image normalization.

training_set = train_datagen.flow_from_directory(train_folder,
                                                 target_size = (224, 224),
                                                 batch_size = 163,
                                                 class_mode = 'categorical',
                                                 shuffle=True)

validation_generator = test_datagen.flow_from_directory(val_folder,
    target_size=(224, 224),
    batch_size=32,
    class_mode='categorical',
    shuffle=False)

test_set = test_datagen.flow_from_directory(test_folder,
                                            target_size = (224,224),
                                            batch_size = 32,
                                            class_mode = 'categorical',
                                            shuffle=False
                                            )

# Custom_vgg_model_1
#Training the classifier alone
image_input = Input(shape=(224, 224, 3))

model = VGG16(input_tensor=image_input, include_top=True,weights='imagenet')
model.summary()

last_layer = model.get_layer('fc2').output
#x= Flatten(name='flatten')(last_layer)
out = Dense(2, activation='sigmoid', name='output')(last_layer)
custom_vgg_model = Model(input=image_input, output=out)
custom_vgg_model.summary()

for layer in custom_vgg_model.layers[:-1]:
	layer.trainable = False

custom_vgg_model.layers[3].trainable

custom_vgg_model.compile(loss='binary_crossentropy',optimizer='adam',metrics=['accuracy'])

from sklearn.utils import class_weight
def get_weight(y):
    class_weight_current =  class_weight.compute_class_weight('balanced', np.unique(y), y)
    return class_weight_current

class_weight = get_weight(training_set.classes)
class_weight

t=time.time()
#	t = now()

cnn_model = custom_vgg_model.fit_generator(training_set,
                         steps_per_epoch = len(training_set),
                         epochs = 25,
                         validation_data = validation_generator,
                         validation_steps = len(validation_generator),
                         class_weight=class_weight)

print('Training time: %s' % (t - time.time()))

(loss, accuracy)  = custom_vgg_model.evaluate_generator(test_set,steps=len(test_set))
print("[INFO] loss={:.4f}, accuracy: {:.4f}%".format(loss*100,accuracy * 100))

import tensorflow as tf
import keras
from keras.models import load_model
custom_vgg_model.save('VGG1')

import tensorflow as tf
import keras
model=keras.models.load_model('VGG1')

#Training the feature extraction also

image_input = Input(shape=(224, 224, 3))

model = VGG16(input_tensor=image_input, include_top=True,weights='imagenet')

model.summary()

last_layer = model.get_layer('block5_pool').output
x= Flatten(name='flatten')(last_layer)
x = Dense(128, activation='relu', name='fc1')(x)
x = Dense(128, activation='relu', name='fc2')(x)
out = Dense(2, activation='softmax', name='output')(x)
custom_vgg_model2 = Model(image_input, out)
custom_vgg_model2.summary()

# freeze all the layers except the dense layers
for layer in custom_vgg_model2.layers[:-3]:
	layer.trainable = False

custom_vgg_model2.summary()

custom_vgg_model2.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

t=time.time()
#	t = now()

cnn_model = custom_vgg_model2.fit_generator(training_set,
                         steps_per_epoch = len(training_set),
                         epochs = 25,
                         validation_data = validation_generator,
                         validation_steps = len(validation_generator),
                         class_weight=class_weight)

print('Training time: %s' % (t - time.time()))

(loss, accuracy)  = model.evaluate_generator(test_set,steps=len(test_set))
print("[INFO] loss={:.4f}, accuracy: {:.4f}%".format(loss*100,accuracy * 100))

import tensorflow as tf
import keras
from keras.models import load_model
custom_vgg_model2.save('VGG2')

import tensorflow as tf
import keras
model=keras.models.load_model('VGG2')

